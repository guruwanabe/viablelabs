//
// Font smoothing
// --------------------------------------------------
@mixin font-smoothing($value: on) {
	@if $value == on {
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
	}
	@else {
		-webkit-font-smoothing: subpixel-antialiased;
		-moz-osx-font-smoothing: auto;
	}
}

//
// Keyframaes
// --------------------------------------------------
@mixin keyframes($name){
	@-moz-keyframes #{$name} {
		@content;
	}
	@-webkit-keyframes #{$name} {
		@content;
	}
	@-o-keyframes #{$name} {
		@content;
	}
	@-ms-keyframes #{$name} {
		@content;
	}
	@keyframes #{$name} {
		@content;
	}
}

//
// Border radius
// --------------------------------------------------
@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	   -moz-border-radius: $radius;
	        border-radius: $radius;
}

//
// Custom Icons
// --------------------------------------------------
@at-root {
	// Import the fonts
	@font-face {
		font-family: $icon-custom-font-name;
		src: url('#{$icon-custom-font-path}#{$icon-custom-font-name}.eot?74795179');
		src: url('#{$icon-custom-font-path}#{$icon-custom-font-name}.eot?74795179#iefix') format('embedded-opentype'),
		url('#{$icon-custom-font-path}#{$icon-custom-font-name}.woff?74795179') format('woff'),
		url('#{$icon-custom-font-path}#{$icon-custom-font-name}.ttf?74795179') format('truetype'),
		url('#{$icon-custom-font-path}#{$icon-custom-font-name}.svg?74795179##{$icon-custom-font-svg-id}') format('svg');
		font-weight: normal;
		font-style: normal;
	}
}

// Mapping icons
$icons: (
		divider: "\e800",
		down-open-big: "\e801",
		up-open-big: "\e802",
		code: "\e803",
		arrow-down: "\e804",
		arrow-up: "\e805"
);
// For adding font icons to elements using CSS pseudo-elements
@mixin custom-icon($position: before, $icon: false, $styles: true) {
	@if $position == both {
		$position: 'before, &:after';
	}
	// Either a :before or :after pseudo-element, or both, defaulting to :before
	&:#{$position} {
	@if $icon {
		// A particular icon has been specified
		content: "#{map-get($icons, $icon)}";
	}
	@if $styles {
		// Supportive icon styles required
		@media speech {
			speak: none;
		}
		font-style: normal;
		font-weight: normal;
		font-family: $icon-custom-font-name, sans-serif;
		display: inline-block;
		text-decoration: inherit;
		width: 1em;
		height: 1em;
		margin-right: .2em;
		text-align: center;
		font-variant: normal;
		text-transform: none;
		line-height: 1em;
		margin-left: .2em;
		vertical-align: middle;
		@include font-smoothing(on);
	}
	// Include any extra rules supplied for the pseudo-element
	@content;
}
}

// Set the required styles on all icons
[class^="viable-icon-"],
[class*="viable-icon-"] {
	@include custom-icon();
}

// Setup a class name for each icon
@each $name, $char in $icons {
	.viable-icon-#{$name} {
		&:before{
			content: $char;
		}
	}
}

//
// Animations
// --------------------------------------------------
@mixin icon-animate($animation, $duration){
	@include animation(spin 2s infinite linear);
	@include keyframes(spin){
		0% {
			@include rotate(0deg);
		}
		100% {
			@include rotate(359deg);
		}
	};
}

// Animation variants
.animate-spin {
	@include icon-animate(spin, 2s);
	display: inline-block;
}


//
// Make some thex behave like breadcrumbs
// --------------------------------------------------
@mixin text-tags($color-first, $color-last){
	color: $color-first;
	font-size: ceil(($font-size-base * 1.25));// ~18px
	> span {
		+ span:before {
			content: ' / ';
		}
		&:last-of-type {
			color: $color-last;
			&:before {
				color: $color-first;
			}
		}
	}
}

//
// Oblique section
// --------------------------------------------------
@mixin oblique-section($background, $rotation){
	background-color: $background;
	content: " ";
	height: 50%;
	width: 100%;
	margin: 0 -50px;
	position: absolute;
	right: 0;
	top: -3px;
	z-index: -1;
	@include rotate($rotation);
}

//
// Angled section
// Supports both top/bottom, left/right angles
// --------------------------------------------------
@mixin angled-section($background, $pseudo, $direction, $flip: false, $angle: 1.5deg) {
	@if $pseudo == 'before' or $pseudo == 'after' or $pseudo == 'both' {
		position: relative;
		z-index: 1;
		$selector: if($pseudo == 'both', '&:before,&:after', '&:#{$pseudo}');

		#{$selector} {
			background-color: inherit;
			content: '';
			display: block;
			height: 50%;
			left: 0;
			position: absolute;
			right: 0;
			z-index: -1;
			-webkit-backface-visibility: hidden; // for Chrome Windows
		}

		@if $pseudo == 'before' {
			#{$selector} {
				top: 0;
				@if $direction == 'top' {
					@if $flip {
						transform: skewY($angle * -1);
						transform-origin: 0 0;
					} @else {
						transform: skewY($angle);
						transform-origin: 100% 0;
					}
				} @else {
					width: 100%;
					height: 100%;
					right: -50%;
					left: auto;
					@if $flip {
						transform: skewX($angle * -1);
						transform-origin: 0 0;
					} @else {
						transform: skewX($angle);
						transform-origin: 100% 0;
					}
				}
			}
		}

		@if $pseudo == 'after' {
			#{$selector} {
				bottom: 0;
				@if $direction == 'bottom' {
					@if $flip {
						transform: skewY($angle);
						transform-origin: 0 100%;
					} @else {
						transform: skewY($angle * -1);
						transform-origin: 100%;
					}
				} @else {
					width: 100%;
					height: 100%;
					left: -50%;
					right: auto;
					@if $flip {
						transform: skewX($angle);
						transform-origin: 0 100%;
					} @else {
						transform: skewX($angle * -1);
						transform-origin: 100%;
					}
				}
			}
		}

		@if $pseudo == 'both' {
			&:before {
				top: 0;

				@if $flip {
					transform: skewY($angle * -1);
					transform-origin: 0 0;
				} @else {
					transform: skewY($angle);
					transform-origin: 100% 0;
				}
			}

			&:after {
				bottom: 0;

				@if $flip {
					transform: skewY($angle);
					transform-origin: 0 0;
				} @else {
					transform: skewY($angle * -1);
					transform-origin: 100%;
				}
			}
		}
	}
}

